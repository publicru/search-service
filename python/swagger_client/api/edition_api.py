# coding: utf-8

"""
    Public Search API

    Searches documens and editions  # noqa: E501

    OpenAPI spec version: 2.0.0
    Contact: you@your-company.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class EditionApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def edition_edition_id_get(self, edition_id, **kwargs):  # noqa: E501
        """returns edition  # noqa: E501

        Returns edition specified by editionId   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.edition_edition_id_get(edition_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int edition_id: ID of edition to return (required)
        :return: EditionItem
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.edition_edition_id_get_with_http_info(edition_id, **kwargs)  # noqa: E501
        else:
            (data) = self.edition_edition_id_get_with_http_info(edition_id, **kwargs)  # noqa: E501
            return data

    def edition_edition_id_get_with_http_info(self, edition_id, **kwargs):  # noqa: E501
        """returns edition  # noqa: E501

        Returns edition specified by editionId   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.edition_edition_id_get_with_http_info(edition_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int edition_id: ID of edition to return (required)
        :return: EditionItem
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['edition_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method edition_edition_id_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'edition_id' is set
        if ('edition_id' not in params or
                params['edition_id'] is None):
            raise ValueError("Missing the required parameter `edition_id` when calling `edition_edition_id_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'edition_id' in params:
            path_params['editionId'] = params['edition_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/edition/{editionId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='EditionItem',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def edition_search_post(self, **kwargs):  # noqa: E501
        """searches editions  # noqa: E501

        By passing in the appropriate parameters, you can search for available editions in the system   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.edition_search_post(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str q: search for q in name, alias or url
        :param bool with_prev_name: when true, search in previous edition name as well
        :param str q_geo: search by geo name
        :param bool morph: when true, apply morphology to search terms
        :param str first_letter: filter by first letter of name
        :param str theme_ids: filter by edition themes, a comma separated list of integers
        :param int publisher_id: filter by publisher_id
        :param int type_id: filter by type_id
        :param int periodicity_id: filter by periodicity_id
        :param int areal_id: filter by areal_id
        :param int format_id: filter by areal_id
        :param int circulation_gte: filter by edition circulation is greater than or equal to
        :param int circulation_lte: filter by edition circulation is less than or equal to
        :return: InlineResponse2001
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.edition_search_post_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.edition_search_post_with_http_info(**kwargs)  # noqa: E501
            return data

    def edition_search_post_with_http_info(self, **kwargs):  # noqa: E501
        """searches editions  # noqa: E501

        By passing in the appropriate parameters, you can search for available editions in the system   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.edition_search_post_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str q: search for q in name, alias or url
        :param bool with_prev_name: when true, search in previous edition name as well
        :param str q_geo: search by geo name
        :param bool morph: when true, apply morphology to search terms
        :param str first_letter: filter by first letter of name
        :param str theme_ids: filter by edition themes, a comma separated list of integers
        :param int publisher_id: filter by publisher_id
        :param int type_id: filter by type_id
        :param int periodicity_id: filter by periodicity_id
        :param int areal_id: filter by areal_id
        :param int format_id: filter by areal_id
        :param int circulation_gte: filter by edition circulation is greater than or equal to
        :param int circulation_lte: filter by edition circulation is less than or equal to
        :return: InlineResponse2001
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['q', 'with_prev_name', 'q_geo', 'morph', 'first_letter', 'theme_ids', 'publisher_id', 'type_id', 'periodicity_id', 'areal_id', 'format_id', 'circulation_gte', 'circulation_lte']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method edition_search_post" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'q' in params:
            query_params.append(('q', params['q']))  # noqa: E501
        if 'with_prev_name' in params:
            query_params.append(('with_prev_name', params['with_prev_name']))  # noqa: E501
        if 'q_geo' in params:
            query_params.append(('q_geo', params['q_geo']))  # noqa: E501
        if 'morph' in params:
            query_params.append(('morph', params['morph']))  # noqa: E501
        if 'first_letter' in params:
            query_params.append(('first_letter', params['first_letter']))  # noqa: E501
        if 'theme_ids' in params:
            query_params.append(('theme_ids', params['theme_ids']))  # noqa: E501
        if 'publisher_id' in params:
            query_params.append(('publisher_id', params['publisher_id']))  # noqa: E501
        if 'type_id' in params:
            query_params.append(('type_id', params['type_id']))  # noqa: E501
        if 'periodicity_id' in params:
            query_params.append(('periodicity_id', params['periodicity_id']))  # noqa: E501
        if 'areal_id' in params:
            query_params.append(('areal_id', params['areal_id']))  # noqa: E501
        if 'format_id' in params:
            query_params.append(('format_id', params['format_id']))  # noqa: E501
        if 'circulation_gte' in params:
            query_params.append(('circulation_gte', params['circulation_gte']))  # noqa: E501
        if 'circulation_lte' in params:
            query_params.append(('circulation_lte', params['circulation_lte']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/edition/search', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse2001',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
